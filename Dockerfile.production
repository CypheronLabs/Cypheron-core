# Multi-stage build for production deployment
FROM rust:1.86 as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    libssl-dev \
    pkg-config \
    libclang-dev \
    clang \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency manifests
COPY Cargo.toml Cargo.lock ./
COPY rest-api/Cargo.toml ./rest-api/
COPY core-lib/Cargo.toml ./core-lib/

# Copy source code and vendor dependencies
COPY rest-api/src ./rest-api/src
COPY core-lib ./core-lib
COPY vendor ./vendor

# Build the application in release mode
RUN cargo build --release --bin rest-api

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    libssl3 \
    && rm -rf /var/lib/apt/lists/* \
    && update-ca-certificates

# Create non-root user
RUN groupadd -r pqcore && useradd -r -g pqcore pqcore

# Set working directory
WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/target/release/rest-api /app/pq-core-api

# Copy configuration files (if any)
COPY --chown=pqcore:pqcore config/ ./config/

# Create logs directory
RUN mkdir -p /app/logs && chown pqcore:pqcore /app/logs

# Switch to non-root user
USER pqcore

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Run the application
CMD ["./pq-core-api"]