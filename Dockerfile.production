# Multi-stage build for production deployment
FROM rust:1.86 as builder

# Install only essential build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    libssl-dev \
    pkg-config \
    libclang-dev \
    clang \
    git \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency manifests first for better caching
COPY Cargo.toml Cargo.lock ./
COPY rest-api/Cargo.toml ./rest-api/
COPY core-lib/Cargo.toml ./core-lib/
COPY core-lib/build.rs ./core-lib/

# Copy vendor code (needed for core-lib build)
COPY core-lib/vendor ./core-lib/vendor

# Create dummy source files to build dependencies
RUN mkdir -p rest-api/src core-lib/src \
    && echo "fn main() {}" > rest-api/src/main.rs \
    && echo "fn main() {}" > core-lib/src/main.rs \
    && echo "" > core-lib/src/lib.rs

# Build dependencies (this layer will be cached)
RUN SKIP_VENDOR_INTEGRITY=1 cargo build --release --bin rest-api

# Remove dummy files
RUN rm -rf rest-api/src core-lib/src

# Copy actual source code
COPY rest-api/src ./rest-api/src
COPY core-lib/src ./core-lib/src

# Build with security optimizations
# ENV RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-s"
RUN SKIP_VENDOR_INTEGRITY=1 cargo build --release --bin rest-api

# Runtime stage - using distroless for minimal attack surface
FROM gcr.io/distroless/cc-debian12

# Set working directory
WORKDIR /app

# Copy the binary with proper ownership
COPY --from=builder --chown=65534:65534 /app/target/release/rest-api /app/pq-core-api

# Copy configuration files (create empty config if none exist)
COPY --chown=65534:65534 config* ./config/

# Use non-root user (distroless default nonroot user)
USER 65534:65534

# Expose port
EXPOSE 3000

# Run the application
ENTRYPOINT ["/app/pq-core-api"]