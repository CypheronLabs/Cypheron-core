# Multi-stage build for production deployment
FROM rust:1.90 AS builder

# Install build dependencies including Node.js for static file processing and PostgreSQL client
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    libssl-dev \
    pkg-config \
    libclang-dev \
    clang \
    git \
    ca-certificates \
    nodejs \
    npm \
    libpq-dev \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy entire workspace to ensure proper module resolution
COPY . .

# Install Node.js dependencies for static file processing
RUN npm init -y && npm install --save-dev terser clean-css-cli html-minifier-terser

# Obfuscate static files
RUN chmod +x build-static.sh && ./build-static.sh

# Build with security and performance optimizations
ENV RUSTFLAGS="-C link-arg=-s -C opt-level=3"
RUN SKIP_VENDOR_INTEGRITY=1 cargo build --release --bin rest-api

# Runtime stage - using distroless for minimal attack surface
FROM gcr.io/distroless/cc-debian12

# Set working directory
WORKDIR /app

# Copy the binary with proper ownership
COPY --from=builder --chown=65534:65534 /app/target/release/rest-api /app/pq-core-api

# Copy obfuscated static files for the status page
COPY --from=builder --chown=65534:65534 /app/rest-api/static-build /app/static

# Use non-root user (distroless default nonroot user)
USER 65534:65534

# Expose port (Cloud Run will set PORT environment variable)
EXPOSE 8080

# Run the application
ENTRYPOINT ["/app/pq-core-api"]