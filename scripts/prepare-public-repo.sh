#!/bin/bash

# Script to prepare public repository from current codebase
# This script separates public and private components

set -e

PUBLIC_REPO_DIR="./pq-core-api-public"
PRIVATE_REPO_DIR="./pq-core-lib-private"

echo "Preparing public and private repository separation..."

# Create directories
mkdir -p "$PUBLIC_REPO_DIR"
mkdir -p "$PRIVATE_REPO_DIR"

# Copy public components
echo "Copying public components..."
cp -r rest-api/ "$PUBLIC_REPO_DIR/"
cp -r docs/ "$PUBLIC_REPO_DIR/"
cp -r scripts/ "$PUBLIC_REPO_DIR/"
cp Dockerfile "$PUBLIC_REPO_DIR/"
cp Dockerfile.production "$PUBLIC_REPO_DIR/"
cp docker-compose.yml "$PUBLIC_REPO_DIR/"
cp README.md "$PUBLIC_REPO_DIR/"
cp LICENSE "$PUBLIC_REPO_DIR/"
cp .gitignore.public "$PUBLIC_REPO_DIR/.gitignore"

# Create public Cargo.toml
cat > "$PUBLIC_REPO_DIR/Cargo.toml" << 'EOF'
[workspace]
members = ["rest-api"]
resolver = "2"

[workspace.dependencies]
# Use published version of core-lib from private registry
pq-core-lib = { version = "1.0.0", registry = "your-private-registry" }
# Or use git dependency if preferred
# pq-core-lib = { git = "https://github.com/your-org/pq-core-lib-private", branch = "main" }
EOF

# Update public rest-api Cargo.toml to use external dependency
cat > "$PUBLIC_REPO_DIR/rest-api/Cargo.toml" << 'EOF'
[package]
name = "rest-api"
version = "0.1.0"
edition = "2021"

[dependencies]
# External dependency - your private core library
pq-core-lib = { workspace = true }

# Public dependencies
axum = "0.8"
tokio = { version = "1.0", features = ["full"] }
tracing = "0.1"
tracing-subscriber = "0.3"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
uuid = { version = "1.0", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }
sha2 = "0.10"
base64 = "0.22"
secrecy = "0.8"
thiserror = "1.0"
EOF

# Copy private components
echo "Copying private components..."
cp -r core-lib/ "$PRIVATE_REPO_DIR/"
# Note: vendor code is now part of core-lib/vendor/ directory
cp -r cli/ "$PRIVATE_REPO_DIR/" 2>/dev/null || echo "cli/ directory not found, skipping..."
cp -r grpc-api/ "$PRIVATE_REPO_DIR/" 2>/dev/null || echo "grpc-api/ directory not found, skipping..."

# Copy private documentation and configs
cp SECURITY*.md "$PRIVATE_REPO_DIR/" 2>/dev/null || true
cp HOW_TO_TEST.md "$PRIVATE_REPO_DIR/" 2>/dev/null || true
cp VERIFICATION_REPORT.md "$PRIVATE_REPO_DIR/" 2>/dev/null || true
cp SETUP_NIST_IMPLEMENTATIONS.md "$PRIVATE_REPO_DIR/" 2>/dev/null || true
cp PROJECT_STATUS.md "$PRIVATE_REPO_DIR/" 2>/dev/null || true
cp OWASP_API_COMPLIANCE.md "$PRIVATE_REPO_DIR/" 2>/dev/null || true

# Copy test files
cp test_*.rs "$PRIVATE_REPO_DIR/" 2>/dev/null || true
cp demo_*.rs "$PRIVATE_REPO_DIR/" 2>/dev/null || true
cp *.sh "$PRIVATE_REPO_DIR/" 2>/dev/null || true

# Create private repository Cargo.toml
cat > "$PRIVATE_REPO_DIR/Cargo.toml" << 'EOF'
[workspace]
members = ["core-lib", "cli"]
resolver = "2"

[package]
name = "pq-core-lib"
version = "1.0.0"
edition = "2021"
description = "Post-quantum cryptography core library"
authors = ["Your Organization <contact@yourorg.com>"]
license = "Proprietary"
publish = false  # Prevent accidental publishing to public registries

[lib]
name = "pq_core_lib"
crate-type = ["lib", "staticlib", "cdylib"]

[dependencies]
# Core dependencies for cryptographic implementations
libc = "0.2"
bindgen = "0.69"

[build-dependencies]
cc = "1.0"
bindgen = "0.69"
EOF

# Create private .gitignore
cat > "$PRIVATE_REPO_DIR/.gitignore" << 'EOF'
# Generated by Cargo
debug/
target/
**/*.rs.bk
*.pdb

# Build artifacts
*.o
*.a
*.so
*.dll
*.dylib

# IDE files
.vscode/
.idea/
*.swp
*.swo

# OS files
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Environment files
.env
.env.local
.env.production
EOF

# Create public README
cat > "$PUBLIC_REPO_DIR/README.md" << 'EOF'
# PQ-Core API

A production-ready REST API for post-quantum cryptography operations.

## Features

- **Key Encapsulation Mechanisms (KEM)**: Kyber-512, Kyber-768, Kyber-1024
- **Digital Signatures**: Dilithium-2, Dilithium-3, Dilithium-5, Falcon-512, Falcon-1024
- **Hybrid Cryptography**: Classical + Post-quantum signature combinations
- **Enterprise Security**: API key authentication, rate limiting, audit logging
- **SOC 2 & GDPR Compliance**: Built-in compliance features
- **OWASP API Security**: Following Top 10 security practices

## Quick Start

### Using Docker

```bash
# Pull and run the API
docker pull your-registry/pq-core-api:latest
docker run -p 3000:3000 -e PQ_TEST_API_KEY=your-test-key pq-core-api:latest
```

### Using Docker Compose

```bash
# Clone and run
git clone https://github.com/your-org/pq-core-api.git
cd pq-core-api
docker-compose up -d
```

### Manual Installation

```bash
# Install Rust (if not already installed)
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# Build and run
cargo build --release
PQ_TEST_API_KEY=your-test-key ./target/release/rest-api
```

## API Documentation

### Authentication

All API requests require authentication via API key:

```bash
curl -H "X-API-Key: your-api-key" https://api.pq-core.com/kem/kyber768/keygen
```

### Key Encapsulation (KEM)

Generate keypair:
```bash
curl -X POST https://api.pq-core.com/kem/kyber768/keygen \
  -H "X-API-Key: your-api-key"
```

### Digital Signatures

Sign a message:
```bash
curl -X POST https://api.pq-core.com/sig/dilithium3/sign \
  -H "X-API-Key: your-api-key" \
  -H "Content-Type: application/json" \
  -d '{"private_key": "...", "message": "SGVsbG8gV29ybGQ="}'
```

## Client Libraries

We provide official client libraries for:
- [Python](./docs/examples/client-libraries.md#python-client-library)
- [JavaScript/Node.js](./docs/examples/client-libraries.md#javascriptnodejs-client-library)
- [Go](./docs/examples/client-libraries.md#go-client-library)

## Security

- **Production Ready**: Enterprise-grade security features
- **Compliance**: SOC 2 and GDPR compliance built-in
- **Audit Logging**: Comprehensive audit trails
- **Rate Limiting**: Protection against abuse
- **Input Validation**: Comprehensive input sanitization

## Documentation

- [Getting Started](./docs/getting-started/)
- [API Reference](./docs/api-reference/)
- [Security Model](./docs/security/)
- [Examples](./docs/examples/)

## Support

- GitHub Issues: Report bugs and feature requests
- Documentation: Comprehensive guides and examples
- Enterprise Support: Contact sales@yourorg.com

## License

Licensed under the [Your License]. See LICENSE file for details.
EOF

# Create private README
cat > "$PRIVATE_REPO_DIR/README.md" << 'EOF'
# PQ-Core Library (Private)

**CONFIDENTIAL - Internal Use Only**

This is the private core cryptographic library that powers PQ-Core API.

## Components

- **core-lib/**: Rust wrappers for NIST PQC implementations
- **vendor/**: Official NIST reference implementations
- **cli/**: Command-line tools for development and testing
- **tests/**: Comprehensive test suites

## Security

This repository contains proprietary cryptographic implementations and should not be made public.

## Development

See internal documentation for development guidelines and testing procedures.
EOF

# Create deployment instructions
cat > "$PUBLIC_REPO_DIR/DEPLOYMENT.md" << 'EOF'
# Deployment Guide

## Prerequisites

1. Access to private core library registry
2. Docker and Docker Compose
3. Kubernetes cluster (for production)

## Environment Setup

```bash
# Set up environment variables
export PQ_API_KEY_SECRET="your-secret-key"
export PQ_ENVIRONMENT="production"
export DOCKER_REGISTRY="your-registry.com"
```

## Local Development

```bash
# Using Docker Compose
docker-compose -f docker-compose.dev.yml up -d

# Using Cargo (requires access to private registry)
cargo run --bin rest-api
```

## Production Deployment

### Docker

```bash
# Build and push
docker build -f Dockerfile.production -t $DOCKER_REGISTRY/pq-core-api:latest .
docker push $DOCKER_REGISTRY/pq-core-api:latest

# Deploy
docker-compose up -d
```

### Kubernetes

```bash
# Apply manifests
kubectl apply -f k8s/
```

See `deployment-strategy.md` for detailed deployment options.
EOF

echo "Repository separation complete!"
echo ""
echo "Public repository: $PUBLIC_REPO_DIR"
echo "Private repository: $PRIVATE_REPO_DIR"
echo ""
echo "Next steps:"
echo "1. Initialize git repositories in both directories"
echo "2. Set up private Cargo registry or Git dependency"
echo "3. Update registry URLs in Cargo.toml files"
echo "4. Test build process"
echo "5. Set up CI/CD pipelines"