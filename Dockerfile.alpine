# Multi-stage build for production deployment with Alpine
FROM rust:1.86-alpine as builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    cmake \
    openssl-dev \
    pkgconfig \
    clang \
    clang-dev \
    clang-static \
    llvm \
    llvm-dev \
    git \
    ca-certificates

# Set working directory
WORKDIR /app

# Copy entire workspace to ensure proper module resolution
COPY . .

# Set libclang path for bindgen
ENV LIBCLANG_PATH="/usr/lib/llvm19/lib"
ENV BINDGEN_EXTRA_CLANG_ARGS="-I/usr/include"

# Build with security optimizations
RUN SKIP_VENDOR_INTEGRITY=1 cargo build --release --bin rest-api

# Runtime stage - using Alpine for better entropy support
FROM alpine:3.20

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    libgcc \
    libstdc++

# Set working directory
WORKDIR /app

# Create non-root user
RUN addgroup -g 1000 appuser && \
    adduser -D -s /bin/sh -u 1000 -G appuser appuser

# Copy the binary with proper ownership
COPY --from=builder --chown=appuser:appuser /app/target/release/rest-api /app/pq-core-api

# Use non-root user
USER appuser:appuser

# Set the PORT environment variable for Cloud Run
ENV PORT=8080

# Expose port
EXPOSE 8080

# Run the application
ENTRYPOINT ["/app/pq-core-api"]