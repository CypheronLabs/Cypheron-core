name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  SKIP_VENDOR_INTEGRITY: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libclang-dev clang build-essential
        
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # macOS should have clang by default, but ensure it's available
        xcode-select --install || true
        
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Install LLVM for Windows
        choco install llvm --version=18.1.8 -y
        echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          core-lib/target
          benchmarks/target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', 'core-lib/build.rs') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
          ${{ runner.os }}-cargo-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      working-directory: core-lib
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: core-lib
    
    - name: Run tests
      run: cargo test --all-features --verbose
      working-directory: core-lib
    
    - name: Run benchmarks (compile only)
      run: cargo check --benches
      working-directory: benchmarks

  security:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libclang-dev clang build-essential
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          core-lib/target
        key: ${{ runner.os }}-security-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', 'core-lib/build.rs') }}
        restore-keys: |
          ${{ runner.os }}-security-cargo-
          ${{ runner.os }}-cargo-
    
    - name: Run security tests
      run: |
        cargo test kat_tests --all-features
        cargo test --test crypto_properties --all-features
        cargo test --test timing_tests --all-features
        cargo test --test memory_safety_tests --all-features
        cargo test --test sidechannel_tests --all-features
        cargo test nist_compliance_tests --all-features
      working-directory: core-lib

  publish-check:
    name: Publish Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libclang-dev clang build-essential
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry and build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          core-lib/target
        key: ${{ runner.os }}-publish-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', 'core-lib/build.rs') }}
        restore-keys: |
          ${{ runner.os }}-publish-cargo-
          ${{ runner.os }}-cargo-
    
    - name: Check if crate can be published
      run: cargo publish --dry-run
      working-directory: core-lib